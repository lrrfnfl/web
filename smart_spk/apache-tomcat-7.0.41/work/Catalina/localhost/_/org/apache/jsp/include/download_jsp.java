/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.41
 * Generated at: 2021-11-03 06:38:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.include;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.util.*;
import java.net.*;
import com.spk.util.*;
import org.apache.commons.io.FilenameUtils;

public final class download_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	String saveFilename = request.getParameter("savefilename");
	String filePath = request.getParameter("filepath");
	String fileDeleteAfterDownload = request.getParameter("filedeleteafterdownload");

	BufferedInputStream input = null;
	BufferedOutputStream output = null;

	boolean isSuccess = true;
	String errorMsg = "";

	try {
		System.out.println("savefilename=[" + saveFilename + "]");
		System.out.println("filepath=[" + filePath + "]");

		/*********************************************************************
		 * 로그인 상태의 다운로드 요청인지 검사
		 ********************************************************************/
		System.out.println("AdminType=" + (String)session.getAttribute("ADMINTYPE"));

		if (Util.isEmpty((String)session.getAttribute("ADMINTYPE"))) {
			System.out.println("Session is invalid.");
			isSuccess = false;
			errorMsg = "다운로드는 관리자 로그인 후 가능합니다.";
		}

		/*********************************************************************
		 * 입력 파라미터가 유효한지 검사
		 ********************************************************************/
		if (isSuccess) {
			if (Util.isEmpty(saveFilename) || Util.isEmpty(filePath)) {
				System.out.println("Input parameter error.]");
				System.out.println("savefilename=[" + saveFilename + "]");
				System.out.println("filepath=[" + filePath + "]");
				isSuccess = false;
				errorMsg = "입력 파라미터가 유효하지 않습니다.";
			}
		}

		/*********************************************************************
		 * 유효한 다운로드 경로 요청인지 검사
		 ********************************************************************/
		if (isSuccess) {
			ServletContext servletContext = request.getSession().getServletContext();
			String contextDownloadPath = servletContext.getInitParameter("download_path");
			if (!contextDownloadPath.startsWith("/")) contextDownloadPath = "/" + contextDownloadPath;

			if (!filePath.startsWith(contextDownloadPath)) {
				System.out.println("Download path is invalid.");
				System.out.println("filePath=" + filePath);
				System.out.println("contextDownloadPath=" + contextDownloadPath);
				isSuccess = false;
				errorMsg = "다운로드가 불가능한 경로입니다.";
			} else {
				System.out.println("FilenameUtils.getPath(filePath)=" + FilenameUtils.getPath(filePath));
				if (FilenameUtils.getPath(filePath).indexOf(".") > 0) {
					System.out.println("Download path is invalid.");
					System.out.println("filePath=" + filePath);
					System.out.println("contextDownloadPath=" + contextDownloadPath);
					isSuccess = false;
					errorMsg = "다운로드가 불가능한 경로입니다.";
				}
			}
		}

		/*********************************************************************
		 * 다운로드 처리
		 ********************************************************************/
		if (isSuccess) {
			String fpath = getServletContext().getRealPath(filePath);
			if (!Util.isEmpty(fpath)) {
				File file = new File(fpath);
				if (file.exists()) {
					response.reset();
					if (Util.getBrowser(request).equals("Chrome")){
						if (saveFilename.matches(".*[ㄱ-ㅎㅏ-ㅣ가-힣]+.*")) {
							response.setHeader("Content-Disposition", "attachment; filename=\""+new String(saveFilename.getBytes("UTF-8"), "ISO-8859-1")+"\"");
						} else {
							response.setHeader("Content-Disposition", "attachment; filename=\""+saveFilename+"\"");
						}
					} else {
						response.setHeader("Content-Disposition:", Util.getDisposition(saveFilename, Util.getBrowser(request)));
					}
					response.setHeader("Content-Length", ""+ file.length());
					response.setHeader("Content-Transfer-Encoding", "binary");
					response.setHeader("Pragma", "no-cache");
					response.setHeader("Expires", "-1;");

					input = new BufferedInputStream(new FileInputStream(file));
					byte buffer[] = new byte[1024];
					int len = 0;
					out.clear();
					out.flush();
					output = new BufferedOutputStream(response.getOutputStream());
					while ((len = input.read(buffer)) > 0){
						output.write(buffer,0,len);
					}
					input.close();

					if (!"false".equals(fileDeleteAfterDownload)) {
						if (!file.delete())
							System.out.println("Fail to delete a file. [" + fpath + "]");
					}

					isSuccess = true;
				} else {
					System.out.println("File not found. [" + fpath + "]");
					isSuccess = false;
					errorMsg = "요청한 다운로드 파일이 존재하지 않습니다.";
				}
			} else {
				System.out.println("Invalid path. [" + filePath + "]");
				isSuccess = false;
				errorMsg = "다운로드 경로가 유효하지 않습니다.";
			}
		}
	} catch (Exception e) {
		e.printStackTrace();
	} finally{
		if (null != input) try { input.close(); } catch (Exception e) { e.printStackTrace(); }
		if (null != output) try { output.close(); } catch (Exception e) { e.printStackTrace(); }
	}

	if (!isSuccess) {

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"ko\" lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n");
      out.write("\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\" />\r\n");
      out.write("\t<meta http-equiv=\"Expires\" content=\"-1\" />\r\n");
      out.write("\t<meta http-equiv=\"Pragma\" content=\"no-cache\" />\r\n");
      out.write("\t<meta http-equiv=\"Cache-Control\" content=\"No-Cache\" />\r\n");
      out.write("\r\n");
      out.write("\t<link rel=\"stylesheet\" type=\"text/css\" href=\"/css/default.css\" media=\"all\" />\r\n");
      out.write("\r\n");
      out.write("\t<link rel=\"stylesheet\" type=\"text/css\" href=\"/js/jquery-ui-1.10.3/css/custom-theme/jquery-ui-1.10.3.custom.css\" media=\"all\" />\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"/js/jquery-ui-1.10.3/js/jquery-1.9.1.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"/js/jquery-ui-1.10.3/js/jquery-ui-1.10.3.custom.js\"></script>\r\n");
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t<!--\r\n");
      out.write("\t\t$(document).ready(function() {\r\n");
      out.write("\t\t\t$('#div-message').centerToWindow();\r\n");
      out.write("\r\n");
      out.write("\t\t\t$(window).resize(function() {\r\n");
      out.write("\t\t\t\t$('#div-message').centerToWindow();\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t$.fn.centerToWindow = function() {\r\n");
      out.write("\t\t\tvar obj = $(this);\r\n");
      out.write("\t\t\tvar obj_width = $(this).outerWidth(true);\r\n");
      out.write("\t\t\tvar obj_height = $(this).outerHeight(true);\r\n");
      out.write("\t\t\tvar window_width = window.innerWidth ? window.innerWidth : $(window).width();\r\n");
      out.write("\t\t\tvar window_height = window.innerHeight ? window.innerHeight : $(window).height();\r\n");
      out.write("\t\t\tobj.css({\r\n");
      out.write("\t\t\t\t\"position\" : \"fixed\",\r\n");
      out.write("\t\t\t\t\"top\" : ((window_height / 2) - (obj_height / 2))+\"px\",\r\n");
      out.write("\t\t\t\t\"left\" : ((window_width / 2) - (obj_width / 2))+\"px\"\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t};\r\n");
      out.write("\t//-->\r\n");
      out.write("\t</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body style=\"background-color: #fff\">\r\n");
      out.write("\t<div id=\"div-message\" class=\"ui-widget\" style=\"width: 50%; text-align: center; border: 4px double #922727; border-radius: 12px; -webkit-box-shadow:0px 0px 5px 5px #922727; -moz-box-shadow:0px 0px 5px 5px #922727; box-shadow:0px 0px 5px 5px #922727;\">\r\n");
      out.write("\t\t<div style=\"margin: 20px auto;\">\r\n");
      out.write("\t\t\t<div class=\"ui-state-error ui-corner-all\" style=\"padding: 0 .7em;\">\r\n");
      out.write("\t\t\t\t<div style=\"font-size: 14px;\"><strong>다운로드 중 오류가 발생하셨습니다.</strong></div>\r\n");
      out.write("\t\t\t\t<div style=\"margin-top: 8px; font-size: 12px;\"><span>");
      out.print(errorMsg);
      out.write("</span></div>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");

	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
